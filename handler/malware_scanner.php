<?php

class mo_Mo_wpns_Scan_Handler{
	private $nooffiles=0;
	private $total_files_to_scan;
	public $scanned_files = array();
	function __construct(){

	}
	function mo2f_scan_all_files($scan_config){
		update_option('mo_wpns_malware_scan_in_progress','IN PROGRESS');
		update_option('mo_wpns_files_scanned',0);
		update_option('mo_wpns_infected_files',0);
		ini_set('memory_limit', '-1');
		ini_set('max_execution_time', 0);
		$result = array();
		$folderpaths = array();
		$filepaths = array();
		$wp_repo_file = array();
		$folderNames = "";
		$base = dirname(dirname(dirname(dirname(plugin_dir_path(__FILE__)))));
		$repo_file_path=$base.DIRECTORY_SEPARATOR."wp-content".DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."miniorange";
		if($scan_config['core_scan'] == 1){
			$folderpaths['base'] = $base;
			$folderNames .= "WP Files;";
		} 		
		if($scan_config['plugin_scan'] == 1){
			$folderpaths['plugins'] = $base.DIRECTORY_SEPARATOR."wp-content".DIRECTORY_SEPARATOR."plugins";
			$folderNames .= "Plugins;";
		}
		if($scan_config['theme_scan'] == 1){
			$folderpaths['themes'] = $base.DIRECTORY_SEPARATOR."wp-content".DIRECTORY_SEPARATOR."themes";
			$folderNames .= "Themes;";
		}
		if($scan_config['check_repo'] == 1){
			$folderNames .= "WP Repo Files;";
		}
		$mo2f_malware_db_handler = new mo_MoWpnsDB();
		$reportid = $mo2f_malware_db_handler->create_scan_report($folderNames, $scan_config['type_scan']);
		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}
		if ( ! function_exists( 'plugins_api' ) ) {
		    require_once( ABSPATH . 'wp-admin/includes/plugin-install.php' );
		}
		if($scan_config['check_repo'] == 1){
			if(!is_dir($repo_file_path)){
				mkdir($repo_file_path);
			}
			if($scan_config['core_scan'] == 1){
	            require(ABSPATH . 'wp-includes/version.php');
				//wordpress name to be changed to be changed based on version
				$zip_name="wp-".$wp_version;
				$wp_repo_file['base']=$repo_file_path.DIRECTORY_SEPARATOR.$zip_name;
				update_option('downloaded_wordpress_repo_name', $zip_name);
				if(!is_dir($repo_file_path.DIRECTORY_SEPARATOR.$zip_name)){
					$this->download_repo($zip_name, $wp_version, $repo_file_path);
				}
			}
			if($scan_config['plugin_scan'] == 1){
				$wp_plugin_repo_file=$repo_file_path.DIRECTORY_SEPARATOR."plugins";
				if(!is_dir($wp_plugin_repo_file)){
					mkdir($wp_plugin_repo_file);
				}
				$wp_repo_file['plugins']=$wp_plugin_repo_file;
				$plugin_list=get_site_transient( 'update_plugins' );
		        $all_plugins=array();
				foreach ($plugin_list as $key => $value) {
					if($key=='response'||$key=='no_update'){
						foreach ($value as $ke => $val) {
							$all_plugins[$ke] = $val;
						}
					}
				}
		        $this->iterator_plugins_themes($all_plugins, $wp_plugin_repo_file, 'plugins');
			}
			if($scan_config['theme_scan'] == 1){
				$wp_theme_repo_file=$repo_file_path.DIRECTORY_SEPARATOR."themes";
				if(!is_dir($wp_theme_repo_file)){
					mkdir($wp_theme_repo_file);
				}
				$wp_repo_file['themes']=$wp_theme_repo_file;
				$all_themes=get_site_transient( 'update_themes' )->checked;
		        $this->iterator_plugins_themes($all_themes, $wp_theme_repo_file, 'themes');
			}
		}
		$result = $this->get_scan_result($folderpaths, $wp_repo_file, $scan_config);
		if($result){
			foreach ($result as $key => $value) {
				$mo2f_malware_db_handler->add_report_details($reportid, $key, $value);
			}
		}
		$mo2f_malware_db_handler->scan_report_complete($reportid, $this->nooffiles);
		if(is_dir($repo_file_path)){
			$this->remove_dir($repo_file_path);
		}
		global $mo_dirName;
		update_option('mo_wpns_malware_scan_in_progress','COMPLETE');
		include_once $mo_dirName. DIRECTORY_SEPARATOR.'controllers'.DIRECTORY_SEPARATOR.'malware_scan_result.php';
		include_once $mo_dirName.DIRECTORY_SEPARATOR. 'views'.DIRECTORY_SEPARATOR.'scan_report_view.php';
		$total_scan=$mo2f_malware_db_handler->count_files();
		$total_malicious=$mo2f_malware_db_handler->count_malicious_files();
		$last_scan=$mo2f_malware_db_handler->count_files_last_scan($reportid);
		$malicious_last_scan=$mo2f_malware_db_handler->count_malicious_last_scan($reportid);
		$response=array('total_files'=>$total_scan, 'total_mal'=>$total_malicious, 'scan_files'=>$last_scan, 'mal_files'=>$malicious_last_scan);
		echo mo_wpns_showScanResults();
		echo mo_show_summary();
		exit;
	}

	function iterator_plugins_themes($themes_or_plugins, $path, $type=''){
        foreach($themes_or_plugins as $key => $data){
        	if($type=='plugins'){
	            $plugin_slug=$data->slug;
	            $plugin_directory_location=dirname(dirname(dirname($path))).DIRECTORY_SEPARATOR.'plugins';
	            $plugin_data=get_plugin_data($plugin_directory_location.DIRECTORY_SEPARATOR.$data->plugin);
	            $plugin_version=$plugin_data['Version'];
	            if(!is_dir($path.DIRECTORY_SEPARATOR.$plugin_slug)){
	            	$result= $this->download_repo($plugin_slug, $plugin_version, $path, $type);
	            }
	        } else if($type=='themes'){
	        	if(!is_dir($path.DIRECTORY_SEPARATOR.$key)){
	        		$result= $this->download_repo($key, $data, $path, $type);
	        	}
	        }
        }
    }

    function download_repo($zip_name, $version, $path, $type=''){
		if ($type=='plugins') {
			$download_link="https://downloads.wordpress.org/plugin/".$zip_name.".".$version.".zip";
	        $plugin_name=$zip_name.'.'.$version;
	        $download_result=@file_put_contents($path.DIRECTORY_SEPARATOR.$zip_name.".zip", file_get_contents($download_link));
	        if( $download_result){
	            $result = $this->unzip_downloaded_repo($zip_name, $path);
	        }else {
	        	$download_link="https://downloads.wordpress.org/plugin/".$zip_name.".zip";
	        	$download_result=@file_put_contents($path.DIRECTORY_SEPARATOR.$zip_name.".zip", file_get_contents($download_link));
	        	if( $download_result){
		            $result = $this->unzip_downloaded_repo($zip_name, $path);
		        }else {
		            error_log("Unable to download Plugins");
		        }
	        }
		} else if($type=='themes'){
			$download_link="https://downloads.wordpress.org/theme/".$zip_name.".".$version.".zip";
	        $plugin_name=$zip_name.'.'.$version;
	        $download_result=@file_put_contents($path.DIRECTORY_SEPARATOR.$zip_name.".zip", file_get_contents($download_link));
	        if( $download_result){
	            $result = $this->unzip_downloaded_repo($zip_name, $path);
	        }else {
	        	$download_link="https://downloads.wordpress.org/theme/".$zip_name.".zip";
	        	$download_result=@file_put_contents($path.DIRECTORY_SEPARATOR.$zip_name.".zip", file_get_contents($download_link));
	        	if( $download_result){
		            $result = $this->unzip_downloaded_repo($zip_name, $path);
		        }else {
		            error_log("Unable to download Themes");
		        }
	        }
		} else {
			$download_link="https://wordpress.org/wordpress-".$version.".zip";
			$download_result=@file_put_contents($path.DIRECTORY_SEPARATOR.$zip_name.'.zip', file_get_contents($download_link));
			if($download_result){
				$result=$this->unzip_downloaded_repo($zip_name, $path);
			} else {
				error_log("Unable to download wordpress");
			}
		}
	}

	function unzip_downloaded_repo($name, $path){
		$zip = new ZipArchive;
        $folder_path=$path.DIRECTORY_SEPARATOR.$name.".zip";
        $res = $zip->open($folder_path);
        if ($res === TRUE) {
            // extract it to the path we determined above
            $zip->extractTo($path);
            $zip->close();
            if ($name == get_option('downloaded_wordpress_repo_name')) {
            	rename($path.DIRECTORY_SEPARATOR."wordpress", $path.DIRECTORY_SEPARATOR.$name);
            }
            unlink($folder_path);
            return true;
        } else {
            return false;
        }
	}

	function get_scan_result($folderpaths=array(), $repo_folder_path=array(), $scan_config){
		$nooffiles=0;
		if(!empty($folderpaths)){
			if ( in_array( 'curl', get_loaded_extensions() ) ) {
				$base = dirname(dirname(dirname(dirname(plugin_dir_path(__FILE__)))));
				$wp_default_plugins = ['index.php', 'hello.php', 'akismet'];
				$wp_default_themes = ['index.php', 'twentynineteen', 'twentyseventeen', 'twentysixteen'];
				$wp_repo_files=array();
				$plugin_repo_files=array();
				$theme_repo_files=array();
				$scanresults=array();
				$extensions=['php'];
				$mo2f_malware_db_handler = new mo_MoWpnsDB();

				$folder_paths=array();
				if($scan_config['core_scan'] == 1){
					$folder_paths[0]=$folderpaths['base'];
				}
				else{
					$folder_paths=$folderpaths;
				}
				foreach ($folder_paths as $value) {
					if (is_dir($value)) {
						foreach ($iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($value, \RecursiveDirectoryIterator::SKIP_DOTS), \RecursiveIteratorIterator::SELF_FIRST) as $item) {
							if ($item->isFile()) {
								$scanresult=array();
								$source_file_path = $value . DIRECTORY_SEPARATOR . $iterator->getSubPathName();
								if ($value == $base.DIRECTORY_SEPARATOR.'wp-content'.DIRECTORY_SEPARATOR.'plugins' && in_array(explode(DIRECTORY_SEPARATOR,$iterator->getSubPathName())[0], $wp_default_themes)){
									continue;
								} elseif ($value == $base.DIRECTORY_SEPARATOR.'wp-content'.DIRECTORY_SEPARATOR.'themes' &&  in_array(explode(DIRECTORY_SEPARATOR,$iterator->getSubPathName())[0], $wp_default_plugins)){
									continue;
								} elseif ($value == $base && ($scan_config['core_scan'] == 1)){
									if(count(explode('wp-content'.DIRECTORY_SEPARATOR, $iterator->getSubPathName()))>1){
										if(explode(DIRECTORY_SEPARATOR,explode('wp-content'.DIRECTORY_SEPARATOR, $iterator->getSubPathName())[1])[0]=='plugins'){
											if (!in_array(explode(DIRECTORY_SEPARATOR,explode('wp-content'.DIRECTORY_SEPARATOR.'plugins'.DIRECTORY_SEPARATOR,$iterator->getSubPathName())[1])[0], $wp_default_plugins)) {
												continue;
											}
										} else if(explode(DIRECTORY_SEPARATOR,explode('wp-content'.DIRECTORY_SEPARATOR,$iterator->getSubPathName())[1])[0]=='themes'){
											if (!in_array(explode(DIRECTORY_SEPARATOR,explode('wp-content'.DIRECTORY_SEPARATOR.'themes'.DIRECTORY_SEPARATOR,$iterator->getSubPathName())[1])[0], $wp_default_themes)) {
												continue;
											}
										} else if(count(explode('wp-content'.DIRECTORY_SEPARATOR.'uploads'.DIRECTORY_SEPARATOR, $iterator->getSubPathName()))>1){
											if(explode(DIRECTORY_SEPARATOR,explode('wp-content'.DIRECTORY_SEPARATOR.'uploads'.DIRECTORY_SEPARATOR,$iterator->getSubPathName())[1])[0]=='miniorange'){
												continue;
											}
										}
									}
								}
								$this->nooffiles++;
								if($this->nooffiles - get_option('mo_wpns_files_scanned') > 100){
									update_option('mo_wpns_files_scanned', $this->nooffiles);
								}
								$file_content=file_get_contents($source_file_path);
								if($scan_config['check_repo'] == 1){
		                        	$repo_path=$base.DIRECTORY_SEPARATOR."wp-content".DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."miniorange";
		                        	if($value==$base){
		                        		array_push($wp_repo_files, $iterator->getSubPathName());
		                        		$repo_file_path=$repo_path . DIRECTORY_SEPARATOR . get_option('downloaded_wordpress_repo_name');
		                        		
		                        	} elseif ($value == $base.DIRECTORY_SEPARATOR . 'wp-content' . DIRECTORY_SEPARATOR . 'plugins') {
		                        		array_push($plugin_repo_files, $iterator->getSubPathName());
		                        		$repo_file_path=$repo_path . DIRECTORY_SEPARATOR . 'plugins';
		                        			
		                        	} elseif ($value == $base.DIRECTORY_SEPARATOR . 'wp-content' . DIRECTORY_SEPARATOR . 'themes') {
		                        		array_push($theme_repo_files, $iterator->getSubPathName());
		                        		$repo_file_path=$repo_path . DIRECTORY_SEPARATOR . 'themes';
		                        	}
		                        	$issues = $this->check_with_repo_files($file_content, $repo_file_path.DIRECTORY_SEPARATOR.$iterator->getSubPathName());
                                   	if(!empty($issues)){
                                   		$scanresult['repo']=$issues;
                                    }
		                        }
		                   		
		                        $hash_of_file= md5_file($source_file_path);
		                        $res=$mo2f_malware_db_handler->check_hash($hash_of_file);
		                        if($res){}
		                        else{
		                        	$flag_update=0;
		                        	if(($scan_config['check_vulnerable'] == 1) || ($scan_config['check_sql'] == 1)){
										$contents = file_get_contents($source_file_path);
										$result = array();
										$result = $this->check_vulnerable_code($contents);
										if(!empty($result)){
											$flag_update=1;
											foreach ($result as $index => $type_inf) {
												if($type_inf['i'] == 'vlc'){
													$scanresult['Vulnerable Code'] = $result;
												}else if($type_inf['i'] == 'shc'){
													$scanresult['Shell Script'] = $result;
												}else if($type_inf['i'] == 'sqc'){
													$scanresult['SQL Injection'] = $result;
												}
											}
										}
			                        }
			                        $ext = pathinfo($source_file_path, PATHINFO_EXTENSION);
									if(in_array($ext,$extensions)){

										if($scan_config['ext_link_check'] == 1){
											$elresult= $this->check_external_link($file_content);
											if(!empty($elresult)){
												$flag_update=1;
												$scanresult['extl']=$elresult;
											}
										}
									}
									if($flag_update == 0){
										$mo2f_malware_db_handler->insert_hash($source_file_path,$hash_of_file);
									}else{
										$flag_update=0;
										$infected_files=get_option('mo_wpns_infected_files');
										$infected_files++;
										update_option('mo_wpns_infected_files', $infected_files);
									}
		                        }
		                       
		                        
								if(!empty($scanresult))
									$scanresults[$source_file_path]=$scanresult;
								
							}
						}
					}
				}

				update_option('mo_wpns_files_scanned', $this->nooffiles);
				return $scanresults;
			}else{
				return array('message'=>'CURL not installed on the server.');
			}
		} else {
			return array('message'=>'No folder selected for scanning.');
		}
	}

	function check_with_repo_files($file_content, $repo_file_path){
		$issues = array();
		if(file_exists($repo_file_path)){
	        $content=@file_get_contents($repo_file_path);
            $hash_repo = md5($content);
            $hash_file = md5($file_content);
            if ($hash_file != $hash_repo) {
                $issues=array("exist" => "Mismatch in Files");
            }
	    } else {
	    	$issues=array('exist'=>'Unwanted File Found');
	    }
	    if(!empty($issues)){
	    	$infected_files=get_option('mo_wpns_infected_files');
			$infected_files++;
			update_option('mo_wpns_infected_files', $infected_files);
	    }
        return $issues;
	}

	function getlines($contents, $href){
		$newissues = 0;
		$lines = preg_split("/((\r?\n)|(\r\n?))/", $contents);
		for($i=0; $i<count($lines); $i++){
			$line =  $lines[$i];
			if (strpos($line, $href) !== false) {
				$newissues = $i+1;
			}
		}
		return $newissues;
	}

	function check_external_link($contents){
		$issues = array();
		$hrefs = preg_match_all('/<a\s+(?:[^"\'>]+|"[^"]*"|\'[^\']*\')*href=("[^"]+"|\'[^\'‌​]+\'|[^<>\s]+)/i', $contents, $matches) ? $matches: array();
		if(isset($hrefs[1])){
			foreach($hrefs[1] as $href){
				if($this->isexternal($href)){
					$line=$this->getlines($contents, $href);
					$issues[] = array("i"=>"eld", "d"=>$href, "l"=>$line);
				}
			}
		}
		return $issues;
	}

	function isexternal($url) {
	  $url = trim($url);
	  $url = trim($url,';');
	  $url = trim($url,'(');
	  $url = trim($url,')');
	  $url = trim($url,"'");
	  $url = trim($url,'"');
	  $components = parse_url($url); 
	  if(!empty($components['host']) && strpos(strtolower($components['host']),strtolower(sanitize_text_field($_SERVER['HTTP_HOST']))) === false){
		return true;
	  }
	  return false;
	}	
	function check_vulnerable_code($contents){
		$issues = array();
		$tokens = token_get_all($contents);
		
		for($i=0; $i< sizeof($tokens); $i++) {
			$token = $tokens[$i];
			if (is_array($token)) {
				if(in_array(token_name($token[0]), array("T_EVAL"))){
					$issue = $this->getFunctionArgumentsOrEnclosedString("eval", $tokens, $i+1, "vlc", false);
					if(!empty($issue))
						$issues[] = $issue;
				} else if(in_array(token_name($token[0]), array("T_STRING"))){
					if(in_array($token[1],array("fopen","popen","fsockopen","file_get_contents"))){
							$issue = $this->getFunctionArgumentsOrEnclosedString($token[1], $tokens, $i+1, "vlc", true);
							if(!empty($issue))
								$issues[] = $issue;
					} else if(in_array($token[1],array("assert"))){
						$issue = $this->getFunctionArgumentsOrEnclosedString($token[1], $tokens, $i+1, "vlc", false);
						if(!empty($issue))
							$issues[] = $issue;
					} else if(in_array($token[1],array("exec","shell_exec","passthru","system","proc_"))){
						$issue = $this->getFunctionArgumentsOrEnclosedString($token[1], $tokens, $i+1, "shc", false);
						if(!empty($issue))
							$issues[] = $issue;
					}  else if(in_array($token[1],array("mysqli","mysql_connect","mysqli_connect","mysqli_real_connect","PDO"))){
						$issue = $this->getFunctionArgumentsOrEnclosedString($token[1], $tokens, $i+1, "sqc", false);
						if(!empty($issue))
							$issues[] = $issue;
					}
				}
			}
		}
		return $issues;
	}

	function getFunctionArgumentsOrEnclosedString($issueFunction, $tokens, $start, $issuetype, $checkForExternalLink){
		
		$flag = 1;
		$argument = "";
		$line = "";
		$issue = array();
		for($j=$start; $j< sizeof($tokens); $j++) {
			$innertoken = $tokens[$j];
			if ($flag==1 && is_array($innertoken)) {
				$argument .= $innertoken[1];
				if(empty($line))
					$line = $innertoken[2];
			} else if($innertoken==";"){
				$argument .= ";";
				if($checkForExternalLink){
					if($this->isexternal($argument)){
						$issue = array("l"=>$line, "t"=> $issueFunction, "i"=>$issuetype, "d"=>$argument);
					}
				} else {
					$issue = array("l"=>$line, "t"=> $issueFunction, "i"=>$issuetype, "d"=>$argument);
				}
				break;
			} else if($flag==1){
				$argument .= $innertoken;
			}
		}
		return $issue;
	}

	function remove_dir($repo_path){
		$dir=$repo_path;
		$it = new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS);
		$files = new RecursiveIteratorIterator($it,RecursiveIteratorIterator::CHILD_FIRST);
		foreach($files as $file) {
		    if ($file->isDir()){
		        rmdir($file->getRealPath());
		    } else {
		        unlink($file->getRealPath());
		    }
		}
		rmdir($dir);
	}

}

?>